{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dksalaries \u00b6 dksalaries is a python library for scraping, parsing, and analyzing salary information from DraftKings. Documentation : https://sansbacon.github.io/dksalaries/ Source Code : https://github.com/sansbacon/dksalaries Requirements \u00b6 Python 3.8+ requests pandas 1.0+ numpy 1.19+ Installation \u00b6 $ pip install dksalaries Example \u00b6 ```Python from dksalaries import Scraper, Parser . . . License \u00b6 This project is licensed under the terms of the MIT license.","title":"dksalaries"},{"location":"#dksalaries","text":"dksalaries is a python library for scraping, parsing, and analyzing salary information from DraftKings. Documentation : https://sansbacon.github.io/dksalaries/ Source Code : https://github.com/sansbacon/dksalaries","title":"dksalaries"},{"location":"#requirements","text":"Python 3.8+ requests pandas 1.0+ numpy 1.19+","title":"Requirements"},{"location":"#installation","text":"$ pip install dksalaries","title":"Installation"},{"location":"#example","text":"```Python from dksalaries import Scraper, Parser . . .","title":"Example"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"documents-reference/","text":"Workflow module \u00b6 documents.py: object model for draftkings API AttributesDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . type , self . type_id , self . id , self . name , self . value , self . filterable , self . sort_value , self . prompt , ) == ( other . type , other . type_id , other . id , other . name , other . value , other . filterable , other . sort_value , other . prompt , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , type = None , type_id = None , id = None , name = None , value = None , filterable = True , sort_value = None , prompt = None ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __init__ ( self , type = attr_dict [ 'type' ] . default , type_id = attr_dict [ 'type_id' ] . default , id = attr_dict [ 'id' ] . default , name = attr_dict [ 'name' ] . default , value = attr_dict [ 'value' ] . default , filterable = attr_dict [ 'filterable' ] . default , sort_value = attr_dict [ 'sort_value' ] . default , prompt = attr_dict [ 'prompt' ] . default ): self . type = type self . type_id = type_id self . id = id self . name = name self . value = value self . filterable = filterable self . sort_value = sort_value self . prompt = prompt __le__ ( self , other ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) CompetitionDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_id , self . away_team_id , self . home_team_id , self . home_team_score , self . away_team_score , self . home_team_city , self . away_team_city , self . home_team_name , self . away_team_name , self . start_date , self . location , self . last_play , self . team_with_possession , self . time_remaining_status , self . sport , self . status , self . description , self . full_description , self . exceptional_messages , self . series_type , self . number_of_games_in_series , self . series_info , self . home_team_competition_ordinal , self . away_team_competition_ordinal , self . home_team_competition_count , self . away_team_competition_count , ) == ( other . game_id , other . away_team_id , other . home_team_id , other . home_team_score , other . away_team_score , other . home_team_city , other . away_team_city , other . home_team_name , other . away_team_name , other . start_date , other . location , other . last_play , other . team_with_possession , other . time_remaining_status , other . sport , other . status , other . description , other . full_description , other . exceptional_messages , other . series_type , other . number_of_games_in_series , other . series_info , other . home_team_competition_ordinal , other . away_team_competition_ordinal , other . home_team_competition_count , other . away_team_competition_count , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , game_id = None , away_team_id = None , home_team_id = None , home_team_score = None , away_team_score = None , home_team_city = None , away_team_city = None , home_team_name = None , away_team_name = None , start_date = None , location = None , last_play = None , team_with_possession = None , time_remaining_status = None , sport = None , status = None , description = None , full_description = None , exceptional_messages = NOTHING , series_type = None , number_of_games_in_series = None , series_info = None , home_team_competition_ordinal = None , away_team_competition_ordinal = None , home_team_competition_count = None , away_team_competition_count = None ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __init__ ( self , game_id = attr_dict [ 'game_id' ] . default , away_team_id = attr_dict [ 'away_team_id' ] . default , home_team_id = attr_dict [ 'home_team_id' ] . default , home_team_score = attr_dict [ 'home_team_score' ] . default , away_team_score = attr_dict [ 'away_team_score' ] . default , home_team_city = attr_dict [ 'home_team_city' ] . default , away_team_city = attr_dict [ 'away_team_city' ] . default , home_team_name = attr_dict [ 'home_team_name' ] . default , away_team_name = attr_dict [ 'away_team_name' ] . default , start_date = attr_dict [ 'start_date' ] . default , location = attr_dict [ 'location' ] . default , last_play = attr_dict [ 'last_play' ] . default , team_with_possession = attr_dict [ 'team_with_possession' ] . default , time_remaining_status = attr_dict [ 'time_remaining_status' ] . default , sport = attr_dict [ 'sport' ] . default , status = attr_dict [ 'status' ] . default , description = attr_dict [ 'description' ] . default , full_description = attr_dict [ 'full_description' ] . default , exceptional_messages = NOTHING , series_type = attr_dict [ 'series_type' ] . default , number_of_games_in_series = attr_dict [ 'number_of_games_in_series' ] . default , series_info = attr_dict [ 'series_info' ] . default , home_team_competition_ordinal = attr_dict [ 'home_team_competition_ordinal' ] . default , away_team_competition_ordinal = attr_dict [ 'away_team_competition_ordinal' ] . default , home_team_competition_count = attr_dict [ 'home_team_competition_count' ] . default , away_team_competition_count = attr_dict [ 'away_team_competition_count' ] . default ): self . game_id = game_id self . away_team_id = away_team_id self . home_team_id = home_team_id self . home_team_score = home_team_score self . away_team_score = away_team_score self . home_team_city = home_team_city self . away_team_city = away_team_city self . home_team_name = home_team_name self . away_team_name = away_team_name self . start_date = start_date self . location = location self . last_play = last_play self . team_with_possession = team_with_possession self . time_remaining_status = time_remaining_status self . sport = sport self . status = status self . description = description self . full_description = full_description if exceptional_messages is not NOTHING : self . exceptional_messages = exceptional_messages else : self . exceptional_messages = __attr_factory_exceptional_messages () self . series_type = series_type self . number_of_games_in_series = number_of_games_in_series self . series_info = series_info self . home_team_competition_ordinal = home_team_competition_ordinal self . away_team_competition_ordinal = away_team_competition_ordinal self . home_team_competition_count = home_team_competition_count self . away_team_competition_count = away_team_competition_count __le__ ( self , other ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) ContestDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . uc , self . ec , self . mec , self . fpp , self . s , self . n , self . attr , self . nt , self . m , self . a , self . po , self . pd , self . tix , self . sdstring , self . sd , self . id , self . tmpl , self . pt , self . so , self . fwt , self . is_owner , self . start_time_type , self . dg , self . ulc , self . cs , self . game_type , self . ssd , self . dgpo , self . cso , self . ir , self . rl , self . rlc , self . rll , self . sa , self . free_with_crowns , self . crown_amount , self . is_bonus_finalized , self . is_snake_draft , ) == ( other . uc , other . ec , other . mec , other . fpp , other . s , other . n , other . attr , other . nt , other . m , other . a , other . po , other . pd , other . tix , other . sdstring , other . sd , other . id , other . tmpl , other . pt , other . so , other . fwt , other . is_owner , other . start_time_type , other . dg , other . ulc , other . cs , other . game_type , other . ssd , other . dgpo , other . cso , other . ir , other . rl , other . rlc , other . rll , other . sa , other . free_with_crowns , other . crown_amount , other . is_bonus_finalized , other . is_snake_draft , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , uc = None , ec = None , mec = None , fpp = None , s = None , n = None , attr = None , nt = None , m = None , a = None , po = None , pd = None , tix = None , sdstring = None , sd = None , id = None , tmpl = None , pt = None , so = None , fwt = None , is_owner = None , start_time_type = None , dg = None , ulc = None , cs = None , game_type = None , ssd = None , dgpo = None , cso = None , ir = None , rl = None , rlc = None , rll = None , sa = None , free_with_crowns = None , crown_amount = None , is_bonus_finalized = None , is_snake_draft = None ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __init__ ( self , uc = attr_dict [ 'uc' ] . default , ec = attr_dict [ 'ec' ] . default , mec = attr_dict [ 'mec' ] . default , fpp = attr_dict [ 'fpp' ] . default , s = attr_dict [ 's' ] . default , n = attr_dict [ 'n' ] . default , attr = attr_dict [ 'attr' ] . default , nt = attr_dict [ 'nt' ] . default , m = attr_dict [ 'm' ] . default , a = attr_dict [ 'a' ] . default , po = attr_dict [ 'po' ] . default , pd = attr_dict [ 'pd' ] . default , tix = attr_dict [ 'tix' ] . default , sdstring = attr_dict [ 'sdstring' ] . default , sd = attr_dict [ 'sd' ] . default , id = attr_dict [ 'id' ] . default , tmpl = attr_dict [ 'tmpl' ] . default , pt = attr_dict [ 'pt' ] . default , so = attr_dict [ 'so' ] . default , fwt = attr_dict [ 'fwt' ] . default , is_owner = attr_dict [ 'is_owner' ] . default , start_time_type = attr_dict [ 'start_time_type' ] . default , dg = attr_dict [ 'dg' ] . default , ulc = attr_dict [ 'ulc' ] . default , cs = attr_dict [ 'cs' ] . default , game_type = attr_dict [ 'game_type' ] . default , ssd = attr_dict [ 'ssd' ] . default , dgpo = attr_dict [ 'dgpo' ] . default , cso = attr_dict [ 'cso' ] . default , ir = attr_dict [ 'ir' ] . default , rl = attr_dict [ 'rl' ] . default , rlc = attr_dict [ 'rlc' ] . default , rll = attr_dict [ 'rll' ] . default , sa = attr_dict [ 'sa' ] . default , free_with_crowns = attr_dict [ 'free_with_crowns' ] . default , crown_amount = attr_dict [ 'crown_amount' ] . default , is_bonus_finalized = attr_dict [ 'is_bonus_finalized' ] . default , is_snake_draft = attr_dict [ 'is_snake_draft' ] . default ): self . uc = uc self . ec = ec self . mec = mec self . fpp = fpp self . s = s self . n = n self . attr = attr self . nt = nt self . m = m self . a = a self . po = po self . pd = pd self . tix = tix self . sdstring = sdstring self . sd = sd self . id = id self . tmpl = tmpl self . pt = pt self . so = so self . fwt = fwt self . is_owner = is_owner self . start_time_type = start_time_type self . dg = dg self . ulc = ulc self . cs = cs self . game_type = game_type self . ssd = ssd self . dgpo = dgpo self . cso = cso self . ir = ir self . rl = rl self . rlc = rlc self . rll = rll self . sa = sa self . free_with_crowns = free_with_crowns self . crown_amount = crown_amount self . is_bonus_finalized = is_bonus_finalized self . is_snake_draft = is_snake_draft __le__ ( self , other ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) is_main_slate_contest ( self , dgids ) \u00b6 Determines if contest is on the main slate Parameters: Name Type Description Default dgids List[int] the draftgroupids required Returns: Type Description bool bool Source code in dksalaries/documents.py def is_main_slate_contest ( self , dgids : List [ int ]) -> bool : \"\"\"Determines if contest is on the main slate Args: dgids (List[int]): the draftgroupids Returns: bool \"\"\" return self . dg in dgids DraftablesDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draftables , self . competitions , self . teams_without_competitions , self . draft_alerts , self . draft_stats , self . player_game_attributes , self . error_status , ) == ( other . draftables , other . competitions , other . teams_without_competitions , other . draft_alerts , other . draft_stats , other . player_game_attributes , other . error_status , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , draftables = NOTHING , competitions = NOTHING , teams_without_competitions = NOTHING , draft_alerts = NOTHING , draft_stats = NOTHING , player_game_attributes = NOTHING , error_status = NOTHING ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __init__ ( self , draftables = NOTHING , competitions = NOTHING , teams_without_competitions = NOTHING , draft_alerts = NOTHING , draft_stats = NOTHING , player_game_attributes = NOTHING , error_status = NOTHING ): if draftables is not NOTHING : self . draftables = draftables else : self . draftables = __attr_factory_draftables () if competitions is not NOTHING : self . competitions = competitions else : self . competitions = __attr_factory_competitions () if teams_without_competitions is not NOTHING : self . teams_without_competitions = teams_without_competitions else : self . teams_without_competitions = __attr_factory_teams_without_competitions () if draft_alerts is not NOTHING : self . draft_alerts = draft_alerts else : self . draft_alerts = __attr_factory_draft_alerts () if draft_stats is not NOTHING : self . draft_stats = draft_stats else : self . draft_stats = __attr_factory_draft_stats () if player_game_attributes is not NOTHING : self . player_game_attributes = player_game_attributes else : self . player_game_attributes = __attr_factory_player_game_attributes () if error_status is not NOTHING : self . error_status = error_status else : self . error_status = __attr_factory_error_status () __le__ ( self , other ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) find_player_by_name ( self , first_name = None , last_name = None , full_name = None , players = None ) \u00b6 Finds player by first, last, or full name Parameters: Name Type Description Default first_name str the player first_name, default None None last_name str the player last_name, default None None full_name str the player full_name, default None None players List[Any] the players, default None None Returns: Type Description List[Any] List[Any] Source code in dksalaries/documents.py def find_player_by_name ( self , first_name : str = None , last_name : str = None , full_name : str = None , players : List [ Any ] = None ) -> List [ Any ]: \"\"\"Finds player by first, last, or full name Args: first_name (str): the player first_name, default None last_name (str): the player last_name, default None full_name (str): the player full_name, default None players (List[Any]): the players, default None Returns: List[Any] \"\"\" l = self . draftables if not players else players if first_name : l = [ i for i in l if first_name == i . first_name ] if last_name : l = [ i for i in l if last_name == i . last_name ] if full_name : l = [ i for i in l if full_name == i . full_name ] return l find_player_by_position ( self , pos , players = None ) \u00b6 Finds player by position Parameters: Name Type Description Default pos str the player position required players List[Any] the players, default None None Returns: Type Description List[Any] List[Any] Source code in dksalaries/documents.py def find_player_by_position ( self , pos : str , players : List [ Any ] = None ) -> List [ Any ]: \"\"\"Finds player by position Args: pos (str): the player position players (List[Any]): the players, default None Returns: List[Any] \"\"\" l = self . draftables if not players else players return [ i for i in l if pos == i . position ] find_player_by_team ( self , team , players = None ) \u00b6 Finds player by team Parameters: Name Type Description Default team str the player team required players List[Any] the players, default None None Returns: Type Description List[Any] List[Any] Source code in dksalaries/documents.py def find_player_by_team ( self , team : str , players : List [ Any ] = None ) -> List [ Any ]: \"\"\"Finds player by team Args: team (str): the player team players (List[Any]): the players, default None Returns: List[Any] \"\"\" l = self . draftables if not players else players return [ i for i in l if team == i . team_abbreviation ] player_salaries ( self , players = None ) \u00b6 Converts PlayerDocument to PlayerSalaryDocument Parameters: Name Type Description Default players List[dksalaries.documents.PlayerDocument] default None None Returns: Type Description List[dksalaries.documents.PlayerSalaryDocument] List[PlayerSalaryDocument] Source code in dksalaries/documents.py def player_salaries ( self , players : List [ PlayerDocument ] = None ) -> List [ PlayerSalaryDocument ]: \"\"\"Converts PlayerDocument to PlayerSalaryDocument Args: players (List[PlayerDocument]): default None Returns: List[PlayerSalaryDocument] \"\"\" l = self . draftables if not players else players return [ cattr . structure ( cattr . unstructure ( o ), PlayerSalaryDocument ) for o in l ] DraftGroupDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draft_group_id , self . contest_type_id , self . start_date , self . start_date_est , self . sort_order , self . draft_group_tag , self . game_type_id , self . game_type , self . sport_sort_order , self . sport , self . game_count , self . contest_start_time_suffix , self . contest_start_time_type , self . games , self . draft_group_series_id , self . game_set_key , self . allow_ugc , ) == ( other . draft_group_id , other . contest_type_id , other . start_date , other . start_date_est , other . sort_order , other . draft_group_tag , other . game_type_id , other . game_type , other . sport_sort_order , other . sport , other . game_count , other . contest_start_time_suffix , other . contest_start_time_type , other . games , other . draft_group_series_id , other . game_set_key , other . allow_ugc , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , draft_group_id , contest_type_id = None , start_date = None , start_date_est = None , sort_order = None , draft_group_tag = None , game_type_id = None , game_type = None , sport_sort_order = None , sport = None , game_count = None , contest_start_time_suffix = None , contest_start_time_type = None , games = None , draft_group_series_id = None , game_set_key = None , allow_ugc = None ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __init__ ( self , draft_group_id , contest_type_id = attr_dict [ 'contest_type_id' ] . default , start_date = attr_dict [ 'start_date' ] . default , start_date_est = attr_dict [ 'start_date_est' ] . default , sort_order = attr_dict [ 'sort_order' ] . default , draft_group_tag = attr_dict [ 'draft_group_tag' ] . default , game_type_id = attr_dict [ 'game_type_id' ] . default , game_type = attr_dict [ 'game_type' ] . default , sport_sort_order = attr_dict [ 'sport_sort_order' ] . default , sport = attr_dict [ 'sport' ] . default , game_count = attr_dict [ 'game_count' ] . default , contest_start_time_suffix = attr_dict [ 'contest_start_time_suffix' ] . default , contest_start_time_type = attr_dict [ 'contest_start_time_type' ] . default , games = attr_dict [ 'games' ] . default , draft_group_series_id = attr_dict [ 'draft_group_series_id' ] . default , game_set_key = attr_dict [ 'game_set_key' ] . default , allow_ugc = attr_dict [ 'allow_ugc' ] . default ): self . draft_group_id = draft_group_id self . contest_type_id = contest_type_id self . start_date = start_date self . start_date_est = start_date_est self . sort_order = sort_order self . draft_group_tag = draft_group_tag self . game_type_id = game_type_id self . game_type = game_type self . sport_sort_order = sport_sort_order self . sport = sport self . game_count = game_count self . contest_start_time_suffix = contest_start_time_suffix self . contest_start_time_type = contest_start_time_type self . games = games self . draft_group_series_id = draft_group_series_id self . game_set_key = game_set_key self . allow_ugc = allow_ugc __le__ ( self , other ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) DraftStatsDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . id , self . abbr , self . name , self . order , ) == ( other . id , other . abbr , other . name , other . order , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , id , abbr , name , order ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __init__ ( self , id , abbr , name , order ): self . id = id self . abbr = abbr self . name = name self . order = order __le__ ( self , other ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) GameSetDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_set_key , self . competitions , self . game_styles , self . contest_start_time_suffix , self . sort_order , self . min_start_time , self . tag , ) == ( other . game_set_key , other . competitions , other . game_styles , other . contest_start_time_suffix , other . sort_order , other . min_start_time , other . tag , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , game_set_key , competitions = NOTHING , game_styles = NOTHING , contest_start_time_suffix = None , sort_order = None , min_start_time = None , tag = None ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __init__ ( self , game_set_key , competitions = NOTHING , game_styles = NOTHING , contest_start_time_suffix = attr_dict [ 'contest_start_time_suffix' ] . default , sort_order = attr_dict [ 'sort_order' ] . default , min_start_time = attr_dict [ 'min_start_time' ] . default , tag = attr_dict [ 'tag' ] . default ): self . game_set_key = game_set_key if competitions is not NOTHING : self . competitions = competitions else : self . competitions = __attr_factory_competitions () if game_styles is not NOTHING : self . game_styles = game_styles else : self . game_styles = __attr_factory_game_styles () self . contest_start_time_suffix = contest_start_time_suffix self . sort_order = sort_order self . min_start_time = min_start_time self . tag = tag __le__ ( self , other ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) is_main_slate ( self , n_games ) \u00b6 Tests if gameset is main slate Parameters: Name Type Description Default main_slate_teams List[str] main slate teams from nflschedule or other source required Returns: Type Description bool bool Source code in dksalaries/documents.py def is_main_slate ( self , n_games : int ) -> bool : \"\"\"Tests if gameset is main slate Args: main_slate_teams (List[str]): main slate teams from nflschedule or other source Returns: bool \"\"\" # to test main slate, # (1) check if game counts are same # (2) check if game style is classic # if both are true, then is main slate return all (( self . n_games == n_games , 'Classic' in self . game_style_names , self . tag != 'Featured' )) GameStyleDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_id , self . game_style_id , self . sport_id , self . sort_order , self . name , self . abbreviation , self . description , self . is_enabled , self . attributes , ) == ( other . game_id , other . game_style_id , other . sport_id , other . sort_order , other . name , other . abbreviation , other . description , other . is_enabled , other . attributes , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , game_id = None , game_style_id = None , sport_id = None , sort_order = None , name = None , abbreviation = None , description = None , is_enabled = None , attributes = None ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __init__ ( self , game_id = attr_dict [ 'game_id' ] . default , game_style_id = attr_dict [ 'game_style_id' ] . default , sport_id = attr_dict [ 'sport_id' ] . default , sort_order = attr_dict [ 'sort_order' ] . default , name = attr_dict [ 'name' ] . default , abbreviation = attr_dict [ 'abbreviation' ] . default , description = attr_dict [ 'description' ] . default , is_enabled = attr_dict [ 'is_enabled' ] . default , attributes = attr_dict [ 'attributes' ] . default ): self . game_id = game_id self . game_style_id = game_style_id self . sport_id = sport_id self . sort_order = sort_order self . name = name self . abbreviation = abbreviation self . description = description self . is_enabled = is_enabled self . attributes = attributes __le__ ( self , other ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) GameTypeDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_type_id , self . sport_id , self . name , self . description , self . tag , self . draft_type , self . game_style , self . is_season_long , ) == ( other . game_type_id , other . sport_id , other . name , other . description , other . tag , other . draft_type , other . game_style , other . is_season_long , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , game_type_id , sport_id , name , description = None , tag = None , draft_type = None , game_style = NOTHING , is_season_long = False ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __init__ ( self , game_type_id , sport_id , name , description = attr_dict [ 'description' ] . default , tag = attr_dict [ 'tag' ] . default , draft_type = attr_dict [ 'draft_type' ] . default , game_style = NOTHING , is_season_long = attr_dict [ 'is_season_long' ] . default ): self . game_type_id = game_type_id self . sport_id = sport_id self . name = name self . description = description self . tag = tag self . draft_type = draft_type if game_style is not NOTHING : self . game_style = game_style else : self . game_style = __attr_factory_game_style () self . is_season_long = is_season_long __le__ ( self , other ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) GetContestsDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . contests , self . tournaments , self . draft_groups , self . game_sets , self . game_types , self . user_prizes , self . marketing_offers , self . direct_challenge_modal , self . deposit_transaction , self . show_raf_link , self . prize_redemption_model , self . prize_redemption_pop , self . use_raptor_head_to_head , self . use_js_web_lobby_modals , self . show_game_style_filter , self . sport_menu_items , self . user_geo_location , self . show_ads , self . is_vip , self . ads_enabled , ) == ( other . contests , other . tournaments , other . draft_groups , other . game_sets , other . game_types , other . user_prizes , other . marketing_offers , other . direct_challenge_modal , other . deposit_transaction , other . show_raf_link , other . prize_redemption_model , other . prize_redemption_pop , other . use_raptor_head_to_head , other . use_js_web_lobby_modals , other . show_game_style_filter , other . sport_menu_items , other . user_geo_location , other . show_ads , other . is_vip , other . ads_enabled , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , contests = NOTHING , tournaments = NOTHING , draft_groups = NOTHING , game_sets = NOTHING , game_types = NOTHING , user_prizes = NOTHING , marketing_offers = None , direct_challenge_modal = None , deposit_transaction = None , show_raf_link = None , prize_redemption_model = None , prize_redemption_pop = None , use_raptor_head_to_head = None , use_js_web_lobby_modals = None , show_game_style_filter = None , sport_menu_items = None , user_geo_location = None , show_ads = None , is_vip = None , ads_enabled = None ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __init__ ( self , contests = NOTHING , tournaments = NOTHING , draft_groups = NOTHING , game_sets = NOTHING , game_types = NOTHING , user_prizes = NOTHING , marketing_offers = attr_dict [ 'marketing_offers' ] . default , direct_challenge_modal = attr_dict [ 'direct_challenge_modal' ] . default , deposit_transaction = attr_dict [ 'deposit_transaction' ] . default , show_raf_link = attr_dict [ 'show_raf_link' ] . default , prize_redemption_model = attr_dict [ 'prize_redemption_model' ] . default , prize_redemption_pop = attr_dict [ 'prize_redemption_pop' ] . default , use_raptor_head_to_head = attr_dict [ 'use_raptor_head_to_head' ] . default , use_js_web_lobby_modals = attr_dict [ 'use_js_web_lobby_modals' ] . default , show_game_style_filter = attr_dict [ 'show_game_style_filter' ] . default , sport_menu_items = attr_dict [ 'sport_menu_items' ] . default , user_geo_location = attr_dict [ 'user_geo_location' ] . default , show_ads = attr_dict [ 'show_ads' ] . default , is_vip = attr_dict [ 'is_vip' ] . default , ads_enabled = attr_dict [ 'ads_enabled' ] . default ): if contests is not NOTHING : self . contests = contests else : self . contests = __attr_factory_contests () if tournaments is not NOTHING : self . tournaments = tournaments else : self . tournaments = __attr_factory_tournaments () if draft_groups is not NOTHING : self . draft_groups = draft_groups else : self . draft_groups = __attr_factory_draft_groups () if game_sets is not NOTHING : self . game_sets = game_sets else : self . game_sets = __attr_factory_game_sets () if game_types is not NOTHING : self . game_types = game_types else : self . game_types = __attr_factory_game_types () if user_prizes is not NOTHING : self . user_prizes = user_prizes else : self . user_prizes = __attr_factory_user_prizes () self . marketing_offers = marketing_offers self . direct_challenge_modal = direct_challenge_modal self . deposit_transaction = deposit_transaction self . show_raf_link = show_raf_link self . prize_redemption_model = prize_redemption_model self . prize_redemption_pop = prize_redemption_pop self . use_raptor_head_to_head = use_raptor_head_to_head self . use_js_web_lobby_modals = use_js_web_lobby_modals self . show_game_style_filter = show_game_style_filter self . sport_menu_items = sport_menu_items self . user_geo_location = user_geo_location self . show_ads = show_ads self . is_vip = is_vip self . ads_enabled = ads_enabled __le__ ( self , other ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) find_contest ( self , filters , contests = None ) \u00b6 Finds contests according to filters Parameters: Name Type Description Default filters dict the filters for the find required contests List[dksalaries.documents.ContestDocument] the contests None Returns: Type Description List[dksalaries.documents.ContestDocument] List[ContestDocument] Source code in dksalaries/documents.py def find_contest ( self , filters : dict , contests : List [ ContestDocument ] = None ) -> List [ ContestDocument ]: \"\"\"Finds contests according to filters Args: filters (dict): the filters for the find contests (List[dict]): the contests Returns: List[ContestDocument] \"\"\" contests = self . contests if not contests else contests for k , v in filters . items (): comp , val = v if comp == 'eq' : contests = [ c for c in contests if getattr ( c , k ) == val ] if comp == 'like' : contests = [ c for c in contests if val in getattr ( c , k )] if comp == 'lte' : contests = [ c for c in contests if getattr ( c , k ) <= val ] if comp == 'gte' : contests = [ c for c in contests if getattr ( c , k ) >= val ] return contests find_main_slate ( self ) \u00b6 Finds the game_set_key and draft_group of the main slate Returns: Type Description Tuple[str, int] Tuple[str, int] Source code in dksalaries/documents.py def find_main_slate ( self ) -> Tuple [ str , int ]: \"\"\"Finds the game_set_key and draft_group of the main slate Args: None Returns: Tuple[str, int] \"\"\" # step one: get the draft group of contests that start Sunday at 1:00 PM dgid = self . find_milly () . dg gskey = [ i . game_set_key for i in self . draft_groups if i . draft_group_id == dgid ][ 0 ] return ( dgid , gskey ) find_milly ( self , contests = None ) \u00b6 Finds Millionaire Makers Source code in dksalaries/documents.py def find_milly ( self , contests : List [ ContestDocument ] = None ) -> List [ ContestDocument ]: \"\"\"Finds Millionaire Makers\"\"\" l = contests if contests else self . contests return [ i for i in l if i . sdstring == 'Sun 1:00PM' and i . game_type == 'Classic' and 'Million' in i . n ][ 0 ] PlayerDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draftable_id , self . first_name , self . last_name , self . display_name , self . short_name , self . player_id , self . player_dk_id , self . team_id , self . team_abbreviation , self . position , self . roster_slot_id , self . salary , self . status , self . is_swappable , self . is_disabled , self . news_status , self . player_image50 , self . player_image160 , self . alt_player_image50 , self . alt_player_image160 , self . draft_stat_attributes , self . player_attributes , self . team_league_season_attributes , self . player_game_attributes , self . draft_alerts , self . player_game_hash , self . competition , self . competitions , ) == ( other . draftable_id , other . first_name , other . last_name , other . display_name , other . short_name , other . player_id , other . player_dk_id , other . team_id , other . team_abbreviation , other . position , other . roster_slot_id , other . salary , other . status , other . is_swappable , other . is_disabled , other . news_status , other . player_image50 , other . player_image160 , other . alt_player_image50 , other . alt_player_image160 , other . draft_stat_attributes , other . player_attributes , other . team_league_season_attributes , other . player_game_attributes , other . draft_alerts , other . player_game_hash , other . competition , other . competitions , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , draftable_id , first_name , last_name , display_name , short_name , player_id , player_dk_id , team_id , team_abbreviation , position , roster_slot_id , salary , status , is_swappable = False , is_disabled = False , news_status = None , player_image50 = None , player_image160 = None , alt_player_image50 = None , alt_player_image160 = None , draft_stat_attributes = NOTHING , player_attributes = NOTHING , team_league_season_attributes = NOTHING , player_game_attributes = NOTHING , draft_alerts = NOTHING , player_game_hash = None , competition = NOTHING , competitions = NOTHING ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __init__ ( self , draftable_id , first_name , last_name , display_name , short_name , player_id , player_dk_id , team_id , team_abbreviation , position , roster_slot_id , salary , status , is_swappable = attr_dict [ 'is_swappable' ] . default , is_disabled = attr_dict [ 'is_disabled' ] . default , news_status = attr_dict [ 'news_status' ] . default , player_image50 = attr_dict [ 'player_image50' ] . default , player_image160 = attr_dict [ 'player_image160' ] . default , alt_player_image50 = attr_dict [ 'alt_player_image50' ] . default , alt_player_image160 = attr_dict [ 'alt_player_image160' ] . default , draft_stat_attributes = NOTHING , player_attributes = NOTHING , team_league_season_attributes = NOTHING , player_game_attributes = NOTHING , draft_alerts = NOTHING , player_game_hash = attr_dict [ 'player_game_hash' ] . default , competition = NOTHING , competitions = NOTHING ): self . draftable_id = draftable_id self . first_name = first_name self . last_name = last_name self . display_name = display_name self . short_name = short_name self . player_id = player_id self . player_dk_id = player_dk_id self . team_id = team_id self . team_abbreviation = team_abbreviation self . position = position self . roster_slot_id = roster_slot_id self . salary = salary self . status = status self . is_swappable = is_swappable self . is_disabled = is_disabled self . news_status = news_status self . player_image50 = player_image50 self . player_image160 = player_image160 self . alt_player_image50 = alt_player_image50 self . alt_player_image160 = alt_player_image160 if draft_stat_attributes is not NOTHING : self . draft_stat_attributes = draft_stat_attributes else : self . draft_stat_attributes = __attr_factory_draft_stat_attributes () if player_attributes is not NOTHING : self . player_attributes = player_attributes else : self . player_attributes = __attr_factory_player_attributes () if team_league_season_attributes is not NOTHING : self . team_league_season_attributes = team_league_season_attributes else : self . team_league_season_attributes = __attr_factory_team_league_season_attributes () if player_game_attributes is not NOTHING : self . player_game_attributes = player_game_attributes else : self . player_game_attributes = __attr_factory_player_game_attributes () if draft_alerts is not NOTHING : self . draft_alerts = draft_alerts else : self . draft_alerts = __attr_factory_draft_alerts () self . player_game_hash = player_game_hash if competition is not NOTHING : self . competition = competition else : self . competition = __attr_factory_competition () if competitions is not NOTHING : self . competitions = competitions else : self . competitions = __attr_factory_competitions () __le__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) PlayerSalaryDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draftable_id , self . player_id , self . player_dk_id , self . first_name , self . last_name , self . display_name , self . team_abbreviation , self . position , self . salary , ) == ( other . draftable_id , other . player_id , other . player_dk_id , other . first_name , other . last_name , other . display_name , other . team_abbreviation , other . position , other . salary , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , draftable_id , player_id , player_dk_id , first_name , last_name , display_name , team_abbreviation , position , salary ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __init__ ( self , draftable_id , player_id , player_dk_id , first_name , last_name , display_name , team_abbreviation , position , salary ): self . draftable_id = draftable_id self . player_id = player_id self . player_dk_id = player_dk_id self . first_name = first_name self . last_name = last_name self . display_name = display_name self . team_abbreviation = team_abbreviation self . position = position self . salary = salary __le__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) SlateDocument \u00b6 Document that represents main slate information __eq__ ( self , other ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . sport , self . n_games , self . dg , self . game_set_key , self . start_date , self . end_date , self . is_main_slate , self . slate_teams , self . slate_players , ) == ( other . sport , other . n_games , other . dg , other . game_set_key , other . start_date , other . end_date , other . is_main_slate , other . slate_teams , other . slate_players , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , sport , n_games , dg , game_set_key , start_date , end_date , is_main_slate , slate_teams = NOTHING , slate_players = NOTHING ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __init__ ( self , sport , n_games , dg , game_set_key , start_date , end_date , is_main_slate , slate_teams = NOTHING , slate_players = NOTHING ): self . sport = sport self . n_games = n_games self . dg = dg self . game_set_key = game_set_key self . start_date = start_date self . end_date = end_date self . is_main_slate = is_main_slate if slate_teams is not NOTHING : self . slate_teams = slate_teams else : self . slate_teams = __attr_factory_slate_teams () if slate_players is not NOTHING : self . slate_players = slate_players else : self . slate_players = __attr_factory_slate_players () __le__ ( self , other ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) TournamentDocument \u00b6 __eq__ ( self , other ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . tournament_key , self . name , self . draft_group_id , self . is_visible , self . sort_order , self . status , self . entrants , self . contest_attributes , self . maximum_entries , self . maximum_entries_per_user , self . entry_fee , self . accepted_tickets , self . total_payouts , self . payout_descriptions , self . fpp_award , self . payout_summaries , self . sport_id , self . crown_amount , self . ticket_only_entry , self . start_time , self . start_time_type , self . game_set_key , ) == ( other . tournament_key , other . name , other . draft_group_id , other . is_visible , other . sort_order , other . status , other . entrants , other . contest_attributes , other . maximum_entries , other . maximum_entries_per_user , other . entry_fee , other . accepted_tickets , other . total_payouts , other . payout_descriptions , other . fpp_award , other . payout_summaries , other . sport_id , other . crown_amount , other . ticket_only_entry , other . start_time , other . start_time_type , other . game_set_key , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , tournament_key , name , draft_group_id , is_visible , sort_order , status , entrants , contest_attributes , maximum_entries , maximum_entries_per_user , entry_fee , accepted_tickets , total_payouts , payout_descriptions , fpp_award , payout_summaries , sport_id , crown_amount , ticket_only_entry , start_time , start_time_type , game_set_key ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __init__ ( self , tournament_key , name , draft_group_id , is_visible , sort_order , status , entrants , contest_attributes , maximum_entries , maximum_entries_per_user , entry_fee , accepted_tickets , total_payouts , payout_descriptions , fpp_award , payout_summaries , sport_id , crown_amount , ticket_only_entry , start_time , start_time_type , game_set_key ): self . tournament_key = tournament_key self . name = name self . draft_group_id = draft_group_id self . is_visible = is_visible self . sort_order = sort_order self . status = status self . entrants = entrants self . contest_attributes = contest_attributes self . maximum_entries = maximum_entries self . maximum_entries_per_user = maximum_entries_per_user self . entry_fee = entry_fee self . accepted_tickets = accepted_tickets self . total_payouts = total_payouts self . payout_descriptions = payout_descriptions self . fpp_award = fpp_award self . payout_summaries = payout_summaries self . sport_id = sport_id self . crown_amount = crown_amount self . ticket_only_entry = ticket_only_entry self . start_time = start_time self . start_time_type = start_time_type self . game_set_key = game_set_key __le__ ( self , other ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"documents"},{"location":"documents-reference/#workflow-module","text":"documents.py: object model for draftkings API","title":"Workflow module"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument","text":"","title":"AttributesDocument"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__eq__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . type , self . type_id , self . id , self . name , self . value , self . filterable , self . sort_value , self . prompt , ) == ( other . type , other . type_id , other . id , other . name , other . value , other . filterable , other . sort_value , other . prompt , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__ge__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__gt__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__init__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __init__ ( self , type = attr_dict [ 'type' ] . default , type_id = attr_dict [ 'type_id' ] . default , id = attr_dict [ 'id' ] . default , name = attr_dict [ 'name' ] . default , value = attr_dict [ 'value' ] . default , filterable = attr_dict [ 'filterable' ] . default , sort_value = attr_dict [ 'sort_value' ] . default , prompt = attr_dict [ 'prompt' ] . default ): self . type = type self . type_id = type_id self . id = id self . name = name self . value = value self . filterable = filterable self . sort_value = sort_value self . prompt = prompt","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__le__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__lt__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__ne__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.AttributesDocument.__repr__","text":"Method generated by attrs for class AttributesDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument","text":"","title":"CompetitionDocument"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__eq__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_id , self . away_team_id , self . home_team_id , self . home_team_score , self . away_team_score , self . home_team_city , self . away_team_city , self . home_team_name , self . away_team_name , self . start_date , self . location , self . last_play , self . team_with_possession , self . time_remaining_status , self . sport , self . status , self . description , self . full_description , self . exceptional_messages , self . series_type , self . number_of_games_in_series , self . series_info , self . home_team_competition_ordinal , self . away_team_competition_ordinal , self . home_team_competition_count , self . away_team_competition_count , ) == ( other . game_id , other . away_team_id , other . home_team_id , other . home_team_score , other . away_team_score , other . home_team_city , other . away_team_city , other . home_team_name , other . away_team_name , other . start_date , other . location , other . last_play , other . team_with_possession , other . time_remaining_status , other . sport , other . status , other . description , other . full_description , other . exceptional_messages , other . series_type , other . number_of_games_in_series , other . series_info , other . home_team_competition_ordinal , other . away_team_competition_ordinal , other . home_team_competition_count , other . away_team_competition_count , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__ge__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__gt__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__init__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __init__ ( self , game_id = attr_dict [ 'game_id' ] . default , away_team_id = attr_dict [ 'away_team_id' ] . default , home_team_id = attr_dict [ 'home_team_id' ] . default , home_team_score = attr_dict [ 'home_team_score' ] . default , away_team_score = attr_dict [ 'away_team_score' ] . default , home_team_city = attr_dict [ 'home_team_city' ] . default , away_team_city = attr_dict [ 'away_team_city' ] . default , home_team_name = attr_dict [ 'home_team_name' ] . default , away_team_name = attr_dict [ 'away_team_name' ] . default , start_date = attr_dict [ 'start_date' ] . default , location = attr_dict [ 'location' ] . default , last_play = attr_dict [ 'last_play' ] . default , team_with_possession = attr_dict [ 'team_with_possession' ] . default , time_remaining_status = attr_dict [ 'time_remaining_status' ] . default , sport = attr_dict [ 'sport' ] . default , status = attr_dict [ 'status' ] . default , description = attr_dict [ 'description' ] . default , full_description = attr_dict [ 'full_description' ] . default , exceptional_messages = NOTHING , series_type = attr_dict [ 'series_type' ] . default , number_of_games_in_series = attr_dict [ 'number_of_games_in_series' ] . default , series_info = attr_dict [ 'series_info' ] . default , home_team_competition_ordinal = attr_dict [ 'home_team_competition_ordinal' ] . default , away_team_competition_ordinal = attr_dict [ 'away_team_competition_ordinal' ] . default , home_team_competition_count = attr_dict [ 'home_team_competition_count' ] . default , away_team_competition_count = attr_dict [ 'away_team_competition_count' ] . default ): self . game_id = game_id self . away_team_id = away_team_id self . home_team_id = home_team_id self . home_team_score = home_team_score self . away_team_score = away_team_score self . home_team_city = home_team_city self . away_team_city = away_team_city self . home_team_name = home_team_name self . away_team_name = away_team_name self . start_date = start_date self . location = location self . last_play = last_play self . team_with_possession = team_with_possession self . time_remaining_status = time_remaining_status self . sport = sport self . status = status self . description = description self . full_description = full_description if exceptional_messages is not NOTHING : self . exceptional_messages = exceptional_messages else : self . exceptional_messages = __attr_factory_exceptional_messages () self . series_type = series_type self . number_of_games_in_series = number_of_games_in_series self . series_info = series_info self . home_team_competition_ordinal = home_team_competition_ordinal self . away_team_competition_ordinal = away_team_competition_ordinal self . home_team_competition_count = home_team_competition_count self . away_team_competition_count = away_team_competition_count","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__le__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__lt__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__ne__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.CompetitionDocument.__repr__","text":"Method generated by attrs for class CompetitionDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument","text":"","title":"ContestDocument"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__eq__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . uc , self . ec , self . mec , self . fpp , self . s , self . n , self . attr , self . nt , self . m , self . a , self . po , self . pd , self . tix , self . sdstring , self . sd , self . id , self . tmpl , self . pt , self . so , self . fwt , self . is_owner , self . start_time_type , self . dg , self . ulc , self . cs , self . game_type , self . ssd , self . dgpo , self . cso , self . ir , self . rl , self . rlc , self . rll , self . sa , self . free_with_crowns , self . crown_amount , self . is_bonus_finalized , self . is_snake_draft , ) == ( other . uc , other . ec , other . mec , other . fpp , other . s , other . n , other . attr , other . nt , other . m , other . a , other . po , other . pd , other . tix , other . sdstring , other . sd , other . id , other . tmpl , other . pt , other . so , other . fwt , other . is_owner , other . start_time_type , other . dg , other . ulc , other . cs , other . game_type , other . ssd , other . dgpo , other . cso , other . ir , other . rl , other . rlc , other . rll , other . sa , other . free_with_crowns , other . crown_amount , other . is_bonus_finalized , other . is_snake_draft , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__ge__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__gt__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__init__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __init__ ( self , uc = attr_dict [ 'uc' ] . default , ec = attr_dict [ 'ec' ] . default , mec = attr_dict [ 'mec' ] . default , fpp = attr_dict [ 'fpp' ] . default , s = attr_dict [ 's' ] . default , n = attr_dict [ 'n' ] . default , attr = attr_dict [ 'attr' ] . default , nt = attr_dict [ 'nt' ] . default , m = attr_dict [ 'm' ] . default , a = attr_dict [ 'a' ] . default , po = attr_dict [ 'po' ] . default , pd = attr_dict [ 'pd' ] . default , tix = attr_dict [ 'tix' ] . default , sdstring = attr_dict [ 'sdstring' ] . default , sd = attr_dict [ 'sd' ] . default , id = attr_dict [ 'id' ] . default , tmpl = attr_dict [ 'tmpl' ] . default , pt = attr_dict [ 'pt' ] . default , so = attr_dict [ 'so' ] . default , fwt = attr_dict [ 'fwt' ] . default , is_owner = attr_dict [ 'is_owner' ] . default , start_time_type = attr_dict [ 'start_time_type' ] . default , dg = attr_dict [ 'dg' ] . default , ulc = attr_dict [ 'ulc' ] . default , cs = attr_dict [ 'cs' ] . default , game_type = attr_dict [ 'game_type' ] . default , ssd = attr_dict [ 'ssd' ] . default , dgpo = attr_dict [ 'dgpo' ] . default , cso = attr_dict [ 'cso' ] . default , ir = attr_dict [ 'ir' ] . default , rl = attr_dict [ 'rl' ] . default , rlc = attr_dict [ 'rlc' ] . default , rll = attr_dict [ 'rll' ] . default , sa = attr_dict [ 'sa' ] . default , free_with_crowns = attr_dict [ 'free_with_crowns' ] . default , crown_amount = attr_dict [ 'crown_amount' ] . default , is_bonus_finalized = attr_dict [ 'is_bonus_finalized' ] . default , is_snake_draft = attr_dict [ 'is_snake_draft' ] . default ): self . uc = uc self . ec = ec self . mec = mec self . fpp = fpp self . s = s self . n = n self . attr = attr self . nt = nt self . m = m self . a = a self . po = po self . pd = pd self . tix = tix self . sdstring = sdstring self . sd = sd self . id = id self . tmpl = tmpl self . pt = pt self . so = so self . fwt = fwt self . is_owner = is_owner self . start_time_type = start_time_type self . dg = dg self . ulc = ulc self . cs = cs self . game_type = game_type self . ssd = ssd self . dgpo = dgpo self . cso = cso self . ir = ir self . rl = rl self . rlc = rlc self . rll = rll self . sa = sa self . free_with_crowns = free_with_crowns self . crown_amount = crown_amount self . is_bonus_finalized = is_bonus_finalized self . is_snake_draft = is_snake_draft","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__le__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__lt__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__ne__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.__repr__","text":"Method generated by attrs for class ContestDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.ContestDocument.is_main_slate_contest","text":"Determines if contest is on the main slate Parameters: Name Type Description Default dgids List[int] the draftgroupids required Returns: Type Description bool bool Source code in dksalaries/documents.py def is_main_slate_contest ( self , dgids : List [ int ]) -> bool : \"\"\"Determines if contest is on the main slate Args: dgids (List[int]): the draftgroupids Returns: bool \"\"\" return self . dg in dgids","title":"is_main_slate_contest()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument","text":"","title":"DraftablesDocument"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__eq__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draftables , self . competitions , self . teams_without_competitions , self . draft_alerts , self . draft_stats , self . player_game_attributes , self . error_status , ) == ( other . draftables , other . competitions , other . teams_without_competitions , other . draft_alerts , other . draft_stats , other . player_game_attributes , other . error_status , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__ge__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__gt__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__init__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __init__ ( self , draftables = NOTHING , competitions = NOTHING , teams_without_competitions = NOTHING , draft_alerts = NOTHING , draft_stats = NOTHING , player_game_attributes = NOTHING , error_status = NOTHING ): if draftables is not NOTHING : self . draftables = draftables else : self . draftables = __attr_factory_draftables () if competitions is not NOTHING : self . competitions = competitions else : self . competitions = __attr_factory_competitions () if teams_without_competitions is not NOTHING : self . teams_without_competitions = teams_without_competitions else : self . teams_without_competitions = __attr_factory_teams_without_competitions () if draft_alerts is not NOTHING : self . draft_alerts = draft_alerts else : self . draft_alerts = __attr_factory_draft_alerts () if draft_stats is not NOTHING : self . draft_stats = draft_stats else : self . draft_stats = __attr_factory_draft_stats () if player_game_attributes is not NOTHING : self . player_game_attributes = player_game_attributes else : self . player_game_attributes = __attr_factory_player_game_attributes () if error_status is not NOTHING : self . error_status = error_status else : self . error_status = __attr_factory_error_status ()","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__le__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__lt__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__ne__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.__repr__","text":"Method generated by attrs for class DraftablesDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.find_player_by_name","text":"Finds player by first, last, or full name Parameters: Name Type Description Default first_name str the player first_name, default None None last_name str the player last_name, default None None full_name str the player full_name, default None None players List[Any] the players, default None None Returns: Type Description List[Any] List[Any] Source code in dksalaries/documents.py def find_player_by_name ( self , first_name : str = None , last_name : str = None , full_name : str = None , players : List [ Any ] = None ) -> List [ Any ]: \"\"\"Finds player by first, last, or full name Args: first_name (str): the player first_name, default None last_name (str): the player last_name, default None full_name (str): the player full_name, default None players (List[Any]): the players, default None Returns: List[Any] \"\"\" l = self . draftables if not players else players if first_name : l = [ i for i in l if first_name == i . first_name ] if last_name : l = [ i for i in l if last_name == i . last_name ] if full_name : l = [ i for i in l if full_name == i . full_name ] return l","title":"find_player_by_name()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.find_player_by_position","text":"Finds player by position Parameters: Name Type Description Default pos str the player position required players List[Any] the players, default None None Returns: Type Description List[Any] List[Any] Source code in dksalaries/documents.py def find_player_by_position ( self , pos : str , players : List [ Any ] = None ) -> List [ Any ]: \"\"\"Finds player by position Args: pos (str): the player position players (List[Any]): the players, default None Returns: List[Any] \"\"\" l = self . draftables if not players else players return [ i for i in l if pos == i . position ]","title":"find_player_by_position()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.find_player_by_team","text":"Finds player by team Parameters: Name Type Description Default team str the player team required players List[Any] the players, default None None Returns: Type Description List[Any] List[Any] Source code in dksalaries/documents.py def find_player_by_team ( self , team : str , players : List [ Any ] = None ) -> List [ Any ]: \"\"\"Finds player by team Args: team (str): the player team players (List[Any]): the players, default None Returns: List[Any] \"\"\" l = self . draftables if not players else players return [ i for i in l if team == i . team_abbreviation ]","title":"find_player_by_team()"},{"location":"documents-reference/#dksalaries.documents.DraftablesDocument.player_salaries","text":"Converts PlayerDocument to PlayerSalaryDocument Parameters: Name Type Description Default players List[dksalaries.documents.PlayerDocument] default None None Returns: Type Description List[dksalaries.documents.PlayerSalaryDocument] List[PlayerSalaryDocument] Source code in dksalaries/documents.py def player_salaries ( self , players : List [ PlayerDocument ] = None ) -> List [ PlayerSalaryDocument ]: \"\"\"Converts PlayerDocument to PlayerSalaryDocument Args: players (List[PlayerDocument]): default None Returns: List[PlayerSalaryDocument] \"\"\" l = self . draftables if not players else players return [ cattr . structure ( cattr . unstructure ( o ), PlayerSalaryDocument ) for o in l ]","title":"player_salaries()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument","text":"","title":"DraftGroupDocument"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__eq__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draft_group_id , self . contest_type_id , self . start_date , self . start_date_est , self . sort_order , self . draft_group_tag , self . game_type_id , self . game_type , self . sport_sort_order , self . sport , self . game_count , self . contest_start_time_suffix , self . contest_start_time_type , self . games , self . draft_group_series_id , self . game_set_key , self . allow_ugc , ) == ( other . draft_group_id , other . contest_type_id , other . start_date , other . start_date_est , other . sort_order , other . draft_group_tag , other . game_type_id , other . game_type , other . sport_sort_order , other . sport , other . game_count , other . contest_start_time_suffix , other . contest_start_time_type , other . games , other . draft_group_series_id , other . game_set_key , other . allow_ugc , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__ge__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__gt__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__init__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __init__ ( self , draft_group_id , contest_type_id = attr_dict [ 'contest_type_id' ] . default , start_date = attr_dict [ 'start_date' ] . default , start_date_est = attr_dict [ 'start_date_est' ] . default , sort_order = attr_dict [ 'sort_order' ] . default , draft_group_tag = attr_dict [ 'draft_group_tag' ] . default , game_type_id = attr_dict [ 'game_type_id' ] . default , game_type = attr_dict [ 'game_type' ] . default , sport_sort_order = attr_dict [ 'sport_sort_order' ] . default , sport = attr_dict [ 'sport' ] . default , game_count = attr_dict [ 'game_count' ] . default , contest_start_time_suffix = attr_dict [ 'contest_start_time_suffix' ] . default , contest_start_time_type = attr_dict [ 'contest_start_time_type' ] . default , games = attr_dict [ 'games' ] . default , draft_group_series_id = attr_dict [ 'draft_group_series_id' ] . default , game_set_key = attr_dict [ 'game_set_key' ] . default , allow_ugc = attr_dict [ 'allow_ugc' ] . default ): self . draft_group_id = draft_group_id self . contest_type_id = contest_type_id self . start_date = start_date self . start_date_est = start_date_est self . sort_order = sort_order self . draft_group_tag = draft_group_tag self . game_type_id = game_type_id self . game_type = game_type self . sport_sort_order = sport_sort_order self . sport = sport self . game_count = game_count self . contest_start_time_suffix = contest_start_time_suffix self . contest_start_time_type = contest_start_time_type self . games = games self . draft_group_series_id = draft_group_series_id self . game_set_key = game_set_key self . allow_ugc = allow_ugc","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__le__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__lt__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__ne__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.DraftGroupDocument.__repr__","text":"Method generated by attrs for class DraftGroupDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument","text":"","title":"DraftStatsDocument"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__eq__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . id , self . abbr , self . name , self . order , ) == ( other . id , other . abbr , other . name , other . order , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__ge__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__gt__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__init__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __init__ ( self , id , abbr , name , order ): self . id = id self . abbr = abbr self . name = name self . order = order","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__le__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__lt__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__ne__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.DraftStatsDocument.__repr__","text":"Method generated by attrs for class DraftStatsDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument","text":"","title":"GameSetDocument"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__eq__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_set_key , self . competitions , self . game_styles , self . contest_start_time_suffix , self . sort_order , self . min_start_time , self . tag , ) == ( other . game_set_key , other . competitions , other . game_styles , other . contest_start_time_suffix , other . sort_order , other . min_start_time , other . tag , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__ge__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__gt__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__init__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __init__ ( self , game_set_key , competitions = NOTHING , game_styles = NOTHING , contest_start_time_suffix = attr_dict [ 'contest_start_time_suffix' ] . default , sort_order = attr_dict [ 'sort_order' ] . default , min_start_time = attr_dict [ 'min_start_time' ] . default , tag = attr_dict [ 'tag' ] . default ): self . game_set_key = game_set_key if competitions is not NOTHING : self . competitions = competitions else : self . competitions = __attr_factory_competitions () if game_styles is not NOTHING : self . game_styles = game_styles else : self . game_styles = __attr_factory_game_styles () self . contest_start_time_suffix = contest_start_time_suffix self . sort_order = sort_order self . min_start_time = min_start_time self . tag = tag","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__le__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__lt__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__ne__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.__repr__","text":"Method generated by attrs for class GameSetDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.GameSetDocument.is_main_slate","text":"Tests if gameset is main slate Parameters: Name Type Description Default main_slate_teams List[str] main slate teams from nflschedule or other source required Returns: Type Description bool bool Source code in dksalaries/documents.py def is_main_slate ( self , n_games : int ) -> bool : \"\"\"Tests if gameset is main slate Args: main_slate_teams (List[str]): main slate teams from nflschedule or other source Returns: bool \"\"\" # to test main slate, # (1) check if game counts are same # (2) check if game style is classic # if both are true, then is main slate return all (( self . n_games == n_games , 'Classic' in self . game_style_names , self . tag != 'Featured' ))","title":"is_main_slate()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument","text":"","title":"GameStyleDocument"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__eq__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_id , self . game_style_id , self . sport_id , self . sort_order , self . name , self . abbreviation , self . description , self . is_enabled , self . attributes , ) == ( other . game_id , other . game_style_id , other . sport_id , other . sort_order , other . name , other . abbreviation , other . description , other . is_enabled , other . attributes , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__ge__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__gt__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__init__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __init__ ( self , game_id = attr_dict [ 'game_id' ] . default , game_style_id = attr_dict [ 'game_style_id' ] . default , sport_id = attr_dict [ 'sport_id' ] . default , sort_order = attr_dict [ 'sort_order' ] . default , name = attr_dict [ 'name' ] . default , abbreviation = attr_dict [ 'abbreviation' ] . default , description = attr_dict [ 'description' ] . default , is_enabled = attr_dict [ 'is_enabled' ] . default , attributes = attr_dict [ 'attributes' ] . default ): self . game_id = game_id self . game_style_id = game_style_id self . sport_id = sport_id self . sort_order = sort_order self . name = name self . abbreviation = abbreviation self . description = description self . is_enabled = is_enabled self . attributes = attributes","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__le__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__lt__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__ne__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.GameStyleDocument.__repr__","text":"Method generated by attrs for class GameStyleDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument","text":"","title":"GameTypeDocument"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__eq__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . game_type_id , self . sport_id , self . name , self . description , self . tag , self . draft_type , self . game_style , self . is_season_long , ) == ( other . game_type_id , other . sport_id , other . name , other . description , other . tag , other . draft_type , other . game_style , other . is_season_long , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__ge__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__gt__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__init__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __init__ ( self , game_type_id , sport_id , name , description = attr_dict [ 'description' ] . default , tag = attr_dict [ 'tag' ] . default , draft_type = attr_dict [ 'draft_type' ] . default , game_style = NOTHING , is_season_long = attr_dict [ 'is_season_long' ] . default ): self . game_type_id = game_type_id self . sport_id = sport_id self . name = name self . description = description self . tag = tag self . draft_type = draft_type if game_style is not NOTHING : self . game_style = game_style else : self . game_style = __attr_factory_game_style () self . is_season_long = is_season_long","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__le__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__lt__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__ne__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.GameTypeDocument.__repr__","text":"Method generated by attrs for class GameTypeDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument","text":"","title":"GetContestsDocument"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__eq__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . contests , self . tournaments , self . draft_groups , self . game_sets , self . game_types , self . user_prizes , self . marketing_offers , self . direct_challenge_modal , self . deposit_transaction , self . show_raf_link , self . prize_redemption_model , self . prize_redemption_pop , self . use_raptor_head_to_head , self . use_js_web_lobby_modals , self . show_game_style_filter , self . sport_menu_items , self . user_geo_location , self . show_ads , self . is_vip , self . ads_enabled , ) == ( other . contests , other . tournaments , other . draft_groups , other . game_sets , other . game_types , other . user_prizes , other . marketing_offers , other . direct_challenge_modal , other . deposit_transaction , other . show_raf_link , other . prize_redemption_model , other . prize_redemption_pop , other . use_raptor_head_to_head , other . use_js_web_lobby_modals , other . show_game_style_filter , other . sport_menu_items , other . user_geo_location , other . show_ads , other . is_vip , other . ads_enabled , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__ge__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__gt__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__init__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __init__ ( self , contests = NOTHING , tournaments = NOTHING , draft_groups = NOTHING , game_sets = NOTHING , game_types = NOTHING , user_prizes = NOTHING , marketing_offers = attr_dict [ 'marketing_offers' ] . default , direct_challenge_modal = attr_dict [ 'direct_challenge_modal' ] . default , deposit_transaction = attr_dict [ 'deposit_transaction' ] . default , show_raf_link = attr_dict [ 'show_raf_link' ] . default , prize_redemption_model = attr_dict [ 'prize_redemption_model' ] . default , prize_redemption_pop = attr_dict [ 'prize_redemption_pop' ] . default , use_raptor_head_to_head = attr_dict [ 'use_raptor_head_to_head' ] . default , use_js_web_lobby_modals = attr_dict [ 'use_js_web_lobby_modals' ] . default , show_game_style_filter = attr_dict [ 'show_game_style_filter' ] . default , sport_menu_items = attr_dict [ 'sport_menu_items' ] . default , user_geo_location = attr_dict [ 'user_geo_location' ] . default , show_ads = attr_dict [ 'show_ads' ] . default , is_vip = attr_dict [ 'is_vip' ] . default , ads_enabled = attr_dict [ 'ads_enabled' ] . default ): if contests is not NOTHING : self . contests = contests else : self . contests = __attr_factory_contests () if tournaments is not NOTHING : self . tournaments = tournaments else : self . tournaments = __attr_factory_tournaments () if draft_groups is not NOTHING : self . draft_groups = draft_groups else : self . draft_groups = __attr_factory_draft_groups () if game_sets is not NOTHING : self . game_sets = game_sets else : self . game_sets = __attr_factory_game_sets () if game_types is not NOTHING : self . game_types = game_types else : self . game_types = __attr_factory_game_types () if user_prizes is not NOTHING : self . user_prizes = user_prizes else : self . user_prizes = __attr_factory_user_prizes () self . marketing_offers = marketing_offers self . direct_challenge_modal = direct_challenge_modal self . deposit_transaction = deposit_transaction self . show_raf_link = show_raf_link self . prize_redemption_model = prize_redemption_model self . prize_redemption_pop = prize_redemption_pop self . use_raptor_head_to_head = use_raptor_head_to_head self . use_js_web_lobby_modals = use_js_web_lobby_modals self . show_game_style_filter = show_game_style_filter self . sport_menu_items = sport_menu_items self . user_geo_location = user_geo_location self . show_ads = show_ads self . is_vip = is_vip self . ads_enabled = ads_enabled","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__le__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__lt__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__ne__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.__repr__","text":"Method generated by attrs for class GetContestsDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.find_contest","text":"Finds contests according to filters Parameters: Name Type Description Default filters dict the filters for the find required contests List[dksalaries.documents.ContestDocument] the contests None Returns: Type Description List[dksalaries.documents.ContestDocument] List[ContestDocument] Source code in dksalaries/documents.py def find_contest ( self , filters : dict , contests : List [ ContestDocument ] = None ) -> List [ ContestDocument ]: \"\"\"Finds contests according to filters Args: filters (dict): the filters for the find contests (List[dict]): the contests Returns: List[ContestDocument] \"\"\" contests = self . contests if not contests else contests for k , v in filters . items (): comp , val = v if comp == 'eq' : contests = [ c for c in contests if getattr ( c , k ) == val ] if comp == 'like' : contests = [ c for c in contests if val in getattr ( c , k )] if comp == 'lte' : contests = [ c for c in contests if getattr ( c , k ) <= val ] if comp == 'gte' : contests = [ c for c in contests if getattr ( c , k ) >= val ] return contests","title":"find_contest()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.find_main_slate","text":"Finds the game_set_key and draft_group of the main slate Returns: Type Description Tuple[str, int] Tuple[str, int] Source code in dksalaries/documents.py def find_main_slate ( self ) -> Tuple [ str , int ]: \"\"\"Finds the game_set_key and draft_group of the main slate Args: None Returns: Tuple[str, int] \"\"\" # step one: get the draft group of contests that start Sunday at 1:00 PM dgid = self . find_milly () . dg gskey = [ i . game_set_key for i in self . draft_groups if i . draft_group_id == dgid ][ 0 ] return ( dgid , gskey )","title":"find_main_slate()"},{"location":"documents-reference/#dksalaries.documents.GetContestsDocument.find_milly","text":"Finds Millionaire Makers Source code in dksalaries/documents.py def find_milly ( self , contests : List [ ContestDocument ] = None ) -> List [ ContestDocument ]: \"\"\"Finds Millionaire Makers\"\"\" l = contests if contests else self . contests return [ i for i in l if i . sdstring == 'Sun 1:00PM' and i . game_type == 'Classic' and 'Million' in i . n ][ 0 ]","title":"find_milly()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument","text":"","title":"PlayerDocument"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__eq__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draftable_id , self . first_name , self . last_name , self . display_name , self . short_name , self . player_id , self . player_dk_id , self . team_id , self . team_abbreviation , self . position , self . roster_slot_id , self . salary , self . status , self . is_swappable , self . is_disabled , self . news_status , self . player_image50 , self . player_image160 , self . alt_player_image50 , self . alt_player_image160 , self . draft_stat_attributes , self . player_attributes , self . team_league_season_attributes , self . player_game_attributes , self . draft_alerts , self . player_game_hash , self . competition , self . competitions , ) == ( other . draftable_id , other . first_name , other . last_name , other . display_name , other . short_name , other . player_id , other . player_dk_id , other . team_id , other . team_abbreviation , other . position , other . roster_slot_id , other . salary , other . status , other . is_swappable , other . is_disabled , other . news_status , other . player_image50 , other . player_image160 , other . alt_player_image50 , other . alt_player_image160 , other . draft_stat_attributes , other . player_attributes , other . team_league_season_attributes , other . player_game_attributes , other . draft_alerts , other . player_game_hash , other . competition , other . competitions , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__ge__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__gt__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__init__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __init__ ( self , draftable_id , first_name , last_name , display_name , short_name , player_id , player_dk_id , team_id , team_abbreviation , position , roster_slot_id , salary , status , is_swappable = attr_dict [ 'is_swappable' ] . default , is_disabled = attr_dict [ 'is_disabled' ] . default , news_status = attr_dict [ 'news_status' ] . default , player_image50 = attr_dict [ 'player_image50' ] . default , player_image160 = attr_dict [ 'player_image160' ] . default , alt_player_image50 = attr_dict [ 'alt_player_image50' ] . default , alt_player_image160 = attr_dict [ 'alt_player_image160' ] . default , draft_stat_attributes = NOTHING , player_attributes = NOTHING , team_league_season_attributes = NOTHING , player_game_attributes = NOTHING , draft_alerts = NOTHING , player_game_hash = attr_dict [ 'player_game_hash' ] . default , competition = NOTHING , competitions = NOTHING ): self . draftable_id = draftable_id self . first_name = first_name self . last_name = last_name self . display_name = display_name self . short_name = short_name self . player_id = player_id self . player_dk_id = player_dk_id self . team_id = team_id self . team_abbreviation = team_abbreviation self . position = position self . roster_slot_id = roster_slot_id self . salary = salary self . status = status self . is_swappable = is_swappable self . is_disabled = is_disabled self . news_status = news_status self . player_image50 = player_image50 self . player_image160 = player_image160 self . alt_player_image50 = alt_player_image50 self . alt_player_image160 = alt_player_image160 if draft_stat_attributes is not NOTHING : self . draft_stat_attributes = draft_stat_attributes else : self . draft_stat_attributes = __attr_factory_draft_stat_attributes () if player_attributes is not NOTHING : self . player_attributes = player_attributes else : self . player_attributes = __attr_factory_player_attributes () if team_league_season_attributes is not NOTHING : self . team_league_season_attributes = team_league_season_attributes else : self . team_league_season_attributes = __attr_factory_team_league_season_attributes () if player_game_attributes is not NOTHING : self . player_game_attributes = player_game_attributes else : self . player_game_attributes = __attr_factory_player_game_attributes () if draft_alerts is not NOTHING : self . draft_alerts = draft_alerts else : self . draft_alerts = __attr_factory_draft_alerts () self . player_game_hash = player_game_hash if competition is not NOTHING : self . competition = competition else : self . competition = __attr_factory_competition () if competitions is not NOTHING : self . competitions = competitions else : self . competitions = __attr_factory_competitions ()","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__le__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__lt__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__ne__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.PlayerDocument.__repr__","text":"Method generated by attrs for class PlayerDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument","text":"","title":"PlayerSalaryDocument"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__eq__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . draftable_id , self . player_id , self . player_dk_id , self . first_name , self . last_name , self . display_name , self . team_abbreviation , self . position , self . salary , ) == ( other . draftable_id , other . player_id , other . player_dk_id , other . first_name , other . last_name , other . display_name , other . team_abbreviation , other . position , other . salary , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__ge__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__gt__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__init__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __init__ ( self , draftable_id , player_id , player_dk_id , first_name , last_name , display_name , team_abbreviation , position , salary ): self . draftable_id = draftable_id self . player_id = player_id self . player_dk_id = player_dk_id self . first_name = first_name self . last_name = last_name self . display_name = display_name self . team_abbreviation = team_abbreviation self . position = position self . salary = salary","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__le__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__lt__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__ne__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.PlayerSalaryDocument.__repr__","text":"Method generated by attrs for class PlayerSalaryDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument","text":"Document that represents main slate information","title":"SlateDocument"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__eq__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . sport , self . n_games , self . dg , self . game_set_key , self . start_date , self . end_date , self . is_main_slate , self . slate_teams , self . slate_players , ) == ( other . sport , other . n_games , other . dg , other . game_set_key , other . start_date , other . end_date , other . is_main_slate , other . slate_teams , other . slate_players , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__ge__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__gt__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__init__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __init__ ( self , sport , n_games , dg , game_set_key , start_date , end_date , is_main_slate , slate_teams = NOTHING , slate_players = NOTHING ): self . sport = sport self . n_games = n_games self . dg = dg self . game_set_key = game_set_key self . start_date = start_date self . end_date = end_date self . is_main_slate = is_main_slate if slate_teams is not NOTHING : self . slate_teams = slate_teams else : self . slate_teams = __attr_factory_slate_teams () if slate_players is not NOTHING : self . slate_players = slate_players else : self . slate_players = __attr_factory_slate_players ()","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__le__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__lt__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__ne__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.SlateDocument.__repr__","text":"Method generated by attrs for class SlateDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument","text":"","title":"TournamentDocument"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__eq__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . tournament_key , self . name , self . draft_group_id , self . is_visible , self . sort_order , self . status , self . entrants , self . contest_attributes , self . maximum_entries , self . maximum_entries_per_user , self . entry_fee , self . accepted_tickets , self . total_payouts , self . payout_descriptions , self . fpp_award , self . payout_summaries , self . sport_id , self . crown_amount , self . ticket_only_entry , self . start_time , self . start_time_type , self . game_set_key , ) == ( other . tournament_key , other . name , other . draft_group_id , other . is_visible , other . sort_order , other . status , other . entrants , other . contest_attributes , other . maximum_entries , other . maximum_entries_per_user , other . entry_fee , other . accepted_tickets , other . total_payouts , other . payout_descriptions , other . fpp_award , other . payout_summaries , other . sport_id , other . crown_amount , other . ticket_only_entry , other . start_time , other . start_time_type , other . game_set_key , )","title":"__eq__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__ge__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__gt__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__init__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __init__ ( self , tournament_key , name , draft_group_id , is_visible , sort_order , status , entrants , contest_attributes , maximum_entries , maximum_entries_per_user , entry_fee , accepted_tickets , total_payouts , payout_descriptions , fpp_award , payout_summaries , sport_id , crown_amount , ticket_only_entry , start_time , start_time_type , game_set_key ): self . tournament_key = tournament_key self . name = name self . draft_group_id = draft_group_id self . is_visible = is_visible self . sort_order = sort_order self . status = status self . entrants = entrants self . contest_attributes = contest_attributes self . maximum_entries = maximum_entries self . maximum_entries_per_user = maximum_entries_per_user self . entry_fee = entry_fee self . accepted_tickets = accepted_tickets self . total_payouts = total_payouts self . payout_descriptions = payout_descriptions self . fpp_award = fpp_award self . payout_summaries = payout_summaries self . sport_id = sport_id self . crown_amount = crown_amount self . ticket_only_entry = ticket_only_entry self . start_time = start_time self . start_time_type = start_time_type self . game_set_key = game_set_key","title":"__init__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__le__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__lt__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__ne__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"documents-reference/#dksalaries.documents.TournamentDocument.__repr__","text":"Method generated by attrs for class TournamentDocument. Source code in dksalaries/documents.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"features/","text":"dksalaries features \u00b6 Under construction","title":"dksalaries features"},{"location":"features/#dksalaries-features","text":"Under construction","title":"dksalaries features"},{"location":"parser-reference/","text":"Workflow module \u00b6 Parse DK site for data container_objects ( self , l , cls ) \u00b6 Creates container of the specified object Parameters: Name Type Description Default l list the container required cls Any the class to create required Returns: Type Description List[Any] List[Any] - list of the specified class Source code in dksalaries/dksalaries.py def container_objects ( self , l : list , cls : Any ) -> List [ Any ]: \"\"\"Creates container of the specified object Args: l (list): the container cls (Any): the class to create Returns: List[Any] - list of the specified class \"\"\" newvalues = [] for item in l : d = { camel_to_snake ( k ): v for k , v in item . items () if v is not None } obj = cattr . structure_attrs_fromdict ( d , cls ) newvalues . append ( obj ) return newvalues draftables ( self , data ) \u00b6 Parses draftables document Parameters: Name Type Description Default data dict the draftables document required Returns DraftablesDocument Source code in dksalaries/dksalaries.py def draftables ( self , data : dict ) -> DraftablesDocument : \"\"\"Parses draftables document Args: data (dict): the draftables document Returns DraftablesDocument \"\"\" # fix the key names newd = { camel_to_snake ( k ): v for k , v in data . items () if v is not None } # pull out the containers mapping = { 'draftables' : PlayerDocument } popped = { k : newd . pop ( k ) for k in mapping } # create the object o = cattr . structure_attrs_fromdict ( newd , DraftablesDocument ) # now replace the containers with the correct objects for k , v in mapping . items (): setattr ( o , k , self . container_objects ( popped [ k ], v )) return o getcontests ( self , data ) \u00b6 Parses getcontests document Parameters: Name Type Description Default data dict the getcontests document required Returns GetContestsDocument Source code in dksalaries/dksalaries.py def getcontests ( self , data : dict ) -> GetContestsDocument : \"\"\"Parses getcontests document Args: data (dict): the getcontests document Returns GetContestsDocument \"\"\" # fix the key names newd = { camel_to_snake ( k ): v for k , v in data . items () if v is not None } # pull out the containers mapping = { 'contests' : ContestDocument , 'tournaments' : TournamentDocument , 'draft_groups' : DraftGroupDocument , 'game_sets' : GameSetDocument , 'game_types' : GameTypeDocument } popped = { k : newd . pop ( k ) for k in mapping } # create the object o = cattr . structure_attrs_fromdict ( newd , GetContestsDocument ) # handle the ContestDocument objects new_competitions = [] for idx , gs in enumerate ( popped [ 'game_sets' ]): co = [] for comp in gs [ 'Competitions' ]: newco = { camel_to_snake ( k ): v for k , v in comp . items () if v is not None } co . append ( cattr . structure_attrs_fromdict ( newco , CompetitionDocument )) new_competitions . append ( co ) _ = popped [ 'game_sets' ][ idx ] . pop ( 'Competitions' ) # handle the GameStyleDocuments new_gamestyles = [] for idx , gset in enumerate ( popped [ 'game_sets' ]): newgstyles = [] for gstyle in gset [ 'GameStyles' ]: newgstyle = { camel_to_snake ( k ): v for k , v in gstyle . items () if v is not None } newgstyles . append ( cattr . structure_attrs_fromdict ( newgstyle , GameStyleDocument )) new_gamestyles . append ( newgstyles ) _ = popped [ 'game_sets' ][ idx ] . pop ( 'GameStyles' ) # now replace the containers with the correct objects for k , v in mapping . items (): # now create the new objects newobjs = self . container_objects ( popped [ k ], v ) if k == 'game_sets' : for idx , comp in enumerate ( new_competitions ): newobjs [ idx ] . competitions = comp for idx , gstyle in enumerate ( new_gamestyles ): newobjs [ idx ] . game_styles = gstyle # add them to the parent object setattr ( o , k , newobjs ) return o","title":"parser"},{"location":"parser-reference/#workflow-module","text":"Parse DK site for data","title":"Workflow module"},{"location":"parser-reference/#dksalaries.dksalaries.Parser.container_objects","text":"Creates container of the specified object Parameters: Name Type Description Default l list the container required cls Any the class to create required Returns: Type Description List[Any] List[Any] - list of the specified class Source code in dksalaries/dksalaries.py def container_objects ( self , l : list , cls : Any ) -> List [ Any ]: \"\"\"Creates container of the specified object Args: l (list): the container cls (Any): the class to create Returns: List[Any] - list of the specified class \"\"\" newvalues = [] for item in l : d = { camel_to_snake ( k ): v for k , v in item . items () if v is not None } obj = cattr . structure_attrs_fromdict ( d , cls ) newvalues . append ( obj ) return newvalues","title":"container_objects()"},{"location":"parser-reference/#dksalaries.dksalaries.Parser.draftables","text":"Parses draftables document Parameters: Name Type Description Default data dict the draftables document required Returns DraftablesDocument Source code in dksalaries/dksalaries.py def draftables ( self , data : dict ) -> DraftablesDocument : \"\"\"Parses draftables document Args: data (dict): the draftables document Returns DraftablesDocument \"\"\" # fix the key names newd = { camel_to_snake ( k ): v for k , v in data . items () if v is not None } # pull out the containers mapping = { 'draftables' : PlayerDocument } popped = { k : newd . pop ( k ) for k in mapping } # create the object o = cattr . structure_attrs_fromdict ( newd , DraftablesDocument ) # now replace the containers with the correct objects for k , v in mapping . items (): setattr ( o , k , self . container_objects ( popped [ k ], v )) return o","title":"draftables()"},{"location":"parser-reference/#dksalaries.dksalaries.Parser.getcontests","text":"Parses getcontests document Parameters: Name Type Description Default data dict the getcontests document required Returns GetContestsDocument Source code in dksalaries/dksalaries.py def getcontests ( self , data : dict ) -> GetContestsDocument : \"\"\"Parses getcontests document Args: data (dict): the getcontests document Returns GetContestsDocument \"\"\" # fix the key names newd = { camel_to_snake ( k ): v for k , v in data . items () if v is not None } # pull out the containers mapping = { 'contests' : ContestDocument , 'tournaments' : TournamentDocument , 'draft_groups' : DraftGroupDocument , 'game_sets' : GameSetDocument , 'game_types' : GameTypeDocument } popped = { k : newd . pop ( k ) for k in mapping } # create the object o = cattr . structure_attrs_fromdict ( newd , GetContestsDocument ) # handle the ContestDocument objects new_competitions = [] for idx , gs in enumerate ( popped [ 'game_sets' ]): co = [] for comp in gs [ 'Competitions' ]: newco = { camel_to_snake ( k ): v for k , v in comp . items () if v is not None } co . append ( cattr . structure_attrs_fromdict ( newco , CompetitionDocument )) new_competitions . append ( co ) _ = popped [ 'game_sets' ][ idx ] . pop ( 'Competitions' ) # handle the GameStyleDocuments new_gamestyles = [] for idx , gset in enumerate ( popped [ 'game_sets' ]): newgstyles = [] for gstyle in gset [ 'GameStyles' ]: newgstyle = { camel_to_snake ( k ): v for k , v in gstyle . items () if v is not None } newgstyles . append ( cattr . structure_attrs_fromdict ( newgstyle , GameStyleDocument )) new_gamestyles . append ( newgstyles ) _ = popped [ 'game_sets' ][ idx ] . pop ( 'GameStyles' ) # now replace the containers with the correct objects for k , v in mapping . items (): # now create the new objects newobjs = self . container_objects ( popped [ k ], v ) if k == 'game_sets' : for idx , comp in enumerate ( new_competitions ): newobjs [ idx ] . competitions = comp for idx , gstyle in enumerate ( new_gamestyles ): newobjs [ idx ] . game_styles = gstyle # add them to the parent object setattr ( o , k , newobjs ) return o","title":"getcontests()"},{"location":"scraper-reference/","text":"Workflow module \u00b6 Scrape DK site for data Examples: s = Scraper() c = s.contests(sport='NFL') mm = i for i in c if 'Millionaire' in i['n'] dgid = mm['dg'] dt = s.draftables(dgid) draftables ( self , dgid ) \u00b6 Gets draftables JSON Parameters: Name Type Description Default dgid(int) draftgroup ID required Returns: Type Description dict Source code in dksalaries/dksalaries.py def draftables ( self , dgid ): \"\"\" Gets draftables JSON Args: dgid(int): draftgroup ID Returns: dict \"\"\" url = self . api_url + f 'draftgroups/v1/draftgroups/ { dgid } /draftables?' return self . get_json ( url , params = self . base_params ) get_json ( self , url , params , headers = None , response_object = False ) \u00b6 Gets json resource Source code in dksalaries/dksalaries.py def get_json ( self , url , params , headers = None , response_object = False ): \"\"\"Gets json resource\"\"\" headers = headers if headers else {} r = self . s . get ( url , params = params , headers = headers ) if response_object : return r return r . json () getcontests ( self , sport = 'NFL' ) \u00b6 Gets dk contests Parameters: Name Type Description Default sport(str) default 'nfl' required Returns: Type Description dict Source code in dksalaries/dksalaries.py def getcontests ( self , sport = 'NFL' ): \"\"\" Gets dk contests Args: sport(str): default 'nfl' Returns: dict \"\"\" url = \"https://www.draftkings.com/lobby/getcontests\" return self . get_json ( url , params = { 'sport' : sport })","title":"scraper"},{"location":"scraper-reference/#workflow-module","text":"Scrape DK site for data Examples: s = Scraper() c = s.contests(sport='NFL') mm = i for i in c if 'Millionaire' in i['n'] dgid = mm['dg'] dt = s.draftables(dgid)","title":"Workflow module"},{"location":"scraper-reference/#dksalaries.dksalaries.Scraper.draftables","text":"Gets draftables JSON Parameters: Name Type Description Default dgid(int) draftgroup ID required Returns: Type Description dict Source code in dksalaries/dksalaries.py def draftables ( self , dgid ): \"\"\" Gets draftables JSON Args: dgid(int): draftgroup ID Returns: dict \"\"\" url = self . api_url + f 'draftgroups/v1/draftgroups/ { dgid } /draftables?' return self . get_json ( url , params = self . base_params )","title":"draftables()"},{"location":"scraper-reference/#dksalaries.dksalaries.Scraper.get_json","text":"Gets json resource Source code in dksalaries/dksalaries.py def get_json ( self , url , params , headers = None , response_object = False ): \"\"\"Gets json resource\"\"\" headers = headers if headers else {} r = self . s . get ( url , params = params , headers = headers ) if response_object : return r return r . json ()","title":"get_json()"},{"location":"scraper-reference/#dksalaries.dksalaries.Scraper.getcontests","text":"Gets dk contests Parameters: Name Type Description Default sport(str) default 'nfl' required Returns: Type Description dict Source code in dksalaries/dksalaries.py def getcontests ( self , sport = 'NFL' ): \"\"\" Gets dk contests Args: sport(str): default 'nfl' Returns: dict \"\"\" url = \"https://www.draftkings.com/lobby/getcontests\" return self . get_json ( url , params = { 'sport' : sport })","title":"getcontests()"},{"location":"util-reference/","text":"Workflow module \u00b6 attr_boiler ( d ) \u00b6 Generates attr boilerplate for nested dict Parameters: Name Type Description Default d dict required Returns: Type Description None None Source code in dksalaries/util.py def attr_boiler ( d : dict ) -> None : \"\"\"Generates attr boilerplate for nested dict Args: d (dict): Returns: None \"\"\" for k , v in d . items (): if isinstance ( v , list ): print ( f ' { camel_to_snake ( k ) } : List' ) elif isinstance ( v , dict ): print ( f ' { camel_to_snake ( k ) } : List' ) elif isinstance ( v , tuple ): print ( f ' { camel_to_snake ( k ) } : List' ) else : print ( f ' { camel_to_snake ( k ) } : { striptype ( v ) } ' ) camel_to_snake ( s ) \u00b6 Converts camel-case string to snake string Parameters: Name Type Description Default s str the camel-cased string required Returns: Type Description str str Source code in dksalaries/util.py def camel_to_snake ( s : str ) -> str : \"\"\"Converts camel-case string to snake string Args: s (str): the camel-cased string Returns: str \"\"\" name = re . sub ( '(.)([A-Z][a-z]+)' , r '\\1_\\2' , s ) return re . sub ( '([a-z0-9])([A-Z])' , r '\\1_\\2' , s ) . lower () flatten ( t ) \u00b6 Flattens nested lists Parameters: Name Type Description Default t List[List[Any]] the nested lists required Returns: Type Description List[Any] List[Any] Source code in dksalaries/util.py def flatten ( t : List [ List [ Any ]]) -> List [ Any ]: \"\"\"Flattens nested lists Args: t (List[List]): the nested lists Returns: List[Any] \"\"\" return [ item for sublist in t for item in sublist ] map_nested_dicts ( ob , func ) \u00b6 Applies functions to all keys in nested dict Source code in dksalaries/util.py def map_nested_dicts ( ob : Dict [ str , Any ], func : Callable ) -> Dict [ str , Any ]: \"\"\"Applies functions to all keys in nested dict\"\"\" if isinstance ( ob , collections . Mapping ): return { func ( k ): v for k , v in ob . items ()} else : return func ( ob ) parse_dktime ( s , as_local = False , tz = None ) \u00b6 Parses dk time strings Parameters: Name Type Description Default s str the datestring required as_local bool UTC or localtime False tz str timezone str, e.g. 'America/Chicago' None Returns: Type Description datetime datetime.datetime Source code in dksalaries/util.py def parse_dktime ( s : str , as_local : bool = False , tz : str = None ) -> datetime . datetime : \"\"\"Parses dk time strings Args: s (str): the datestring as_local (bool): UTC or localtime tz (str): timezone str, e.g. 'America/Chicago' Returns: datetime.datetime \"\"\" if s . endswith ( 'Z' ): dt = parse ( s ) elif s . startswith ( '/Date' ): epoch = int ( '' . join ([ c for c in s if c . isnumeric ()])) / 1000 dt = datetime . datetime . fromtimestamp ( epoch , tz = pytz . utc ) else : raise ValueError ( f 'Invalid datestring: { s } ' ) if as_local : local_tz = pytz . timezone ( tz ) return dt . astimezone ( local_tz ) return dt striptype ( v ) \u00b6 Strips type information from repr of type(v) Parameters: Name Type Description Default v Any the value required Returns: Type Description str Source code in dksalaries/util.py def striptype ( v ): \"\"\"Strips type information from repr of type(v) Args: v (Any): the value Returns: str \"\"\" if v is None : return 'Any' return str ( type ( v )) . replace ( '<class ' , '' ) . replace ( '>' , '' ) . replace ( \"'\" , '' )","title":"util"},{"location":"util-reference/#workflow-module","text":"","title":"Workflow module"},{"location":"util-reference/#dksalaries.util.attr_boiler","text":"Generates attr boilerplate for nested dict Parameters: Name Type Description Default d dict required Returns: Type Description None None Source code in dksalaries/util.py def attr_boiler ( d : dict ) -> None : \"\"\"Generates attr boilerplate for nested dict Args: d (dict): Returns: None \"\"\" for k , v in d . items (): if isinstance ( v , list ): print ( f ' { camel_to_snake ( k ) } : List' ) elif isinstance ( v , dict ): print ( f ' { camel_to_snake ( k ) } : List' ) elif isinstance ( v , tuple ): print ( f ' { camel_to_snake ( k ) } : List' ) else : print ( f ' { camel_to_snake ( k ) } : { striptype ( v ) } ' )","title":"attr_boiler()"},{"location":"util-reference/#dksalaries.util.camel_to_snake","text":"Converts camel-case string to snake string Parameters: Name Type Description Default s str the camel-cased string required Returns: Type Description str str Source code in dksalaries/util.py def camel_to_snake ( s : str ) -> str : \"\"\"Converts camel-case string to snake string Args: s (str): the camel-cased string Returns: str \"\"\" name = re . sub ( '(.)([A-Z][a-z]+)' , r '\\1_\\2' , s ) return re . sub ( '([a-z0-9])([A-Z])' , r '\\1_\\2' , s ) . lower ()","title":"camel_to_snake()"},{"location":"util-reference/#dksalaries.util.flatten","text":"Flattens nested lists Parameters: Name Type Description Default t List[List[Any]] the nested lists required Returns: Type Description List[Any] List[Any] Source code in dksalaries/util.py def flatten ( t : List [ List [ Any ]]) -> List [ Any ]: \"\"\"Flattens nested lists Args: t (List[List]): the nested lists Returns: List[Any] \"\"\" return [ item for sublist in t for item in sublist ]","title":"flatten()"},{"location":"util-reference/#dksalaries.util.map_nested_dicts","text":"Applies functions to all keys in nested dict Source code in dksalaries/util.py def map_nested_dicts ( ob : Dict [ str , Any ], func : Callable ) -> Dict [ str , Any ]: \"\"\"Applies functions to all keys in nested dict\"\"\" if isinstance ( ob , collections . Mapping ): return { func ( k ): v for k , v in ob . items ()} else : return func ( ob )","title":"map_nested_dicts()"},{"location":"util-reference/#dksalaries.util.parse_dktime","text":"Parses dk time strings Parameters: Name Type Description Default s str the datestring required as_local bool UTC or localtime False tz str timezone str, e.g. 'America/Chicago' None Returns: Type Description datetime datetime.datetime Source code in dksalaries/util.py def parse_dktime ( s : str , as_local : bool = False , tz : str = None ) -> datetime . datetime : \"\"\"Parses dk time strings Args: s (str): the datestring as_local (bool): UTC or localtime tz (str): timezone str, e.g. 'America/Chicago' Returns: datetime.datetime \"\"\" if s . endswith ( 'Z' ): dt = parse ( s ) elif s . startswith ( '/Date' ): epoch = int ( '' . join ([ c for c in s if c . isnumeric ()])) / 1000 dt = datetime . datetime . fromtimestamp ( epoch , tz = pytz . utc ) else : raise ValueError ( f 'Invalid datestring: { s } ' ) if as_local : local_tz = pytz . timezone ( tz ) return dt . astimezone ( local_tz ) return dt","title":"parse_dktime()"},{"location":"util-reference/#dksalaries.util.striptype","text":"Strips type information from repr of type(v) Parameters: Name Type Description Default v Any the value required Returns: Type Description str Source code in dksalaries/util.py def striptype ( v ): \"\"\"Strips type information from repr of type(v) Args: v (Any): the value Returns: str \"\"\" if v is None : return 'Any' return str ( type ( v )) . replace ( '<class ' , '' ) . replace ( '>' , '' ) . replace ( \"'\" , '' )","title":"striptype()"}]}